//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BS.Output.Elementool.Elementool.BugTracking {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", ConfigurationName="Elementool.BugTracking.BugTrackingSoap")]
    public interface BugTrackingSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/LoginCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LoginCheck();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/LoginCheck", ReplyAction="*")]
        System.Threading.Tasks.Task LoginCheckAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetNewIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue GetNewIssue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetNewIssue", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> GetNewIssueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueByNum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue GetIssueByNum(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueByNum", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> GetIssueByNumAsync(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/SaveIssue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue SaveIssue(BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue Issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/SaveIssue", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> SaveIssueAsync(BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue Issue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteQuickReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ExecuteQuickReport(int ReportID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteQuickReport", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExecuteQuickReportAsync(int ReportID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIssueHistory(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIssueHistoryAsync(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueRemarks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetIssueRemarks(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueRemarks", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetIssueRemarksAsync(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueAttachments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetIssueAttachments(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueAttachments", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetIssueAttachmentsAsync(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueAttachmentsInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.IssueAttachment[] GetIssueAttachmentsInfo(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetIssueAttachmentsInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.IssueAttachment[]> GetIssueAttachmentsInfoAsync(int IssueNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/DownloadAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentResponse DownloadAttachment(BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/DownloadAttachment", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentResponse> DownloadAttachmentAsync(BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/DeleteAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.DeleteAttachmentResult DeleteAttachment(int IssueNumber, string FileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/DeleteAttachment", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.DeleteAttachmentResult> DeleteAttachmentAsync(int IssueNumber, string FileUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/AddAttachment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.AddAttachmentResult AddAttachment(int IssueNumber, string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/AddAttachment", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.AddAttachmentResult> AddAttachmentAsync(int IssueNumber, string FileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetMaxAttachmentSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int GetMaxAttachmentSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetMaxAttachmentSize", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetMaxAttachmentSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetWelcomeReports", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet GetWelcomeReports();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetWelcomeReports", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWelcomeReportsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetDBBackup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDBBackup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetDBBackup", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDBBackupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteWelcomeReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportResponse ExecuteWelcomeReport(BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteWelcomeReport", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportResponse> ExecuteWelcomeReportAsync(BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetCustomReportQueryFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.IssueField[] GetCustomReportQueryFields(bool UserDefinedFieldsOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetCustomReportQueryFields", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.IssueField[]> GetCustomReportQueryFieldsAsync(bool UserDefinedFieldsOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteCustomReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportResponse ExecuteCustomReport(BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/ExecuteCustomReport", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportResponse> ExecuteCustomReportAsync(BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetQuickReportsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        BS.Output.Elementool.Elementool.BugTracking.QuickReport[] GetQuickReportsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetQuickReportsList", ReplyAction="*")]
        System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.QuickReport[]> GetQuickReportsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetDateFormat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDateFormat();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetDateFormat", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDateFormatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetAccountsList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAccountsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.elementool.com/WebServices/BugTracking/GetAccountsList", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAccountsListAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class BugTrackingIssue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool isReadOnlyField;
        
        private int issueNumberField;
        
        private string submittedOnField;
        
        private System.DateTime submittedOnDateTimeField;
        
        private IssueField[] fieldsArrayField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsReadOnly {
            get {
                return this.isReadOnlyField;
            }
            set {
                this.isReadOnlyField = value;
                this.RaisePropertyChanged("IsReadOnly");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int IssueNumber {
            get {
                return this.issueNumberField;
            }
            set {
                this.issueNumberField = value;
                this.RaisePropertyChanged("IssueNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string SubmittedOn {
            get {
                return this.submittedOnField;
            }
            set {
                this.submittedOnField = value;
                this.RaisePropertyChanged("SubmittedOn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime SubmittedOnDateTime {
            get {
                return this.submittedOnDateTimeField;
            }
            set {
                this.submittedOnDateTimeField = value;
                this.RaisePropertyChanged("SubmittedOnDateTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public IssueField[] FieldsArray {
            get {
                return this.fieldsArrayField;
            }
            set {
                this.fieldsArrayField = value;
                this.RaisePropertyChanged("FieldsArray");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class IssueField : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string systemNameField;
        
        private string valueField;
        
        private string captionField;
        
        private bool isRequiredField;
        
        private bool isReadOnlyField;
        
        private bool canNotifyField;
        
        private string[] valueListField;
        
        private FieldLayout layoutField;
        
        private bool sendNotificationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SystemName {
            get {
                return this.systemNameField;
            }
            set {
                this.systemNameField = value;
                this.RaisePropertyChanged("SystemName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Caption {
            get {
                return this.captionField;
            }
            set {
                this.captionField = value;
                this.RaisePropertyChanged("Caption");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsRequired {
            get {
                return this.isRequiredField;
            }
            set {
                this.isRequiredField = value;
                this.RaisePropertyChanged("IsRequired");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool IsReadOnly {
            get {
                return this.isReadOnlyField;
            }
            set {
                this.isReadOnlyField = value;
                this.RaisePropertyChanged("IsReadOnly");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool CanNotify {
            get {
                return this.canNotifyField;
            }
            set {
                this.canNotifyField = value;
                this.RaisePropertyChanged("CanNotify");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=6)]
        public string[] ValueList {
            get {
                return this.valueListField;
            }
            set {
                this.valueListField = value;
                this.RaisePropertyChanged("ValueList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public FieldLayout Layout {
            get {
                return this.layoutField;
            }
            set {
                this.layoutField = value;
                this.RaisePropertyChanged("Layout");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool SendNotification {
            get {
                return this.sendNotificationField;
            }
            set {
                this.sendNotificationField = value;
                this.RaisePropertyChanged("SendNotification");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class FieldLayout : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string positionField;
        
        private string fieldTypeField;
        
        private int linesNumField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
                this.RaisePropertyChanged("Position");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
                this.RaisePropertyChanged("FieldType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int LinesNum {
            get {
                return this.linesNumField;
            }
            set {
                this.linesNumField = value;
                this.RaisePropertyChanged("LinesNum");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class QuickReport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class IssueAttachment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("description");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadAttachment", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class DownloadAttachmentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        public string filePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public bool fileIsEmpty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=2)]
        public bool fileExists;
        
        public DownloadAttachmentRequest() {
        }
        
        public DownloadAttachmentRequest(string filePath, bool fileIsEmpty, bool fileExists) {
            this.filePath = filePath;
            this.fileIsEmpty = fileIsEmpty;
            this.fileExists = fileExists;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadAttachmentResponse", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class DownloadAttachmentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadAttachmentResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public bool fileIsEmpty;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=2)]
        public bool fileExists;
        
        public DownloadAttachmentResponse() {
        }
        
        public DownloadAttachmentResponse(byte[] DownloadAttachmentResult, bool fileIsEmpty, bool fileExists) {
            this.DownloadAttachmentResult = DownloadAttachmentResult;
            this.fileIsEmpty = fileIsEmpty;
            this.fileExists = fileExists;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public enum DeleteAttachmentResult {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        AccessDenied,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public enum AddAttachmentResult {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        InvalidIssueNumber,
        
        /// <remarks/>
        SizeTooBig,
        
        /// <remarks/>
        NoFileRecieved,
        
        /// <remarks/>
        MoreThanOneFileRecieved,
        
        /// <remarks/>
        InvalidExtension,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteWelcomeReport", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class ExecuteWelcomeReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        public string ReportID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public string Description;
        
        public ExecuteWelcomeReportRequest() {
        }
        
        public ExecuteWelcomeReportRequest(string ReportID, string Description) {
            this.ReportID = ReportID;
            this.Description = Description;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteWelcomeReportResponse", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class ExecuteWelcomeReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        public System.Data.DataSet ExecuteWelcomeReportResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public string Description;
        
        public ExecuteWelcomeReportResponse() {
        }
        
        public ExecuteWelcomeReportResponse(System.Data.DataSet ExecuteWelcomeReportResult, string Description) {
            this.ExecuteWelcomeReportResult = ExecuteWelcomeReportResult;
            this.Description = Description;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteCustomReport", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class ExecuteCustomReportRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        public BS.Output.Elementool.Elementool.BugTracking.IssueField[] QueryFields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public string Description;
        
        public ExecuteCustomReportRequest() {
        }
        
        public ExecuteCustomReportRequest(BS.Output.Elementool.Elementool.BugTracking.IssueField[] QueryFields, string Description) {
            this.QueryFields = QueryFields;
            this.Description = Description;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ExecuteCustomReportResponse", WrapperNamespace="http://www.elementool.com/WebServices/BugTracking", IsWrapped=true)]
    public partial class ExecuteCustomReportResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=0)]
        public System.Data.DataSet ExecuteCustomReportResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking", Order=1)]
        public string Description;
        
        public ExecuteCustomReportResponse() {
        }
        
        public ExecuteCustomReportResponse(System.Data.DataSet ExecuteCustomReportResult, string Description) {
            this.ExecuteCustomReportResult = ExecuteCustomReportResult;
            this.Description = Description;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BugTrackingSoapChannel : BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BugTrackingSoapClient : System.ServiceModel.ClientBase<BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap>, BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap {
        
        public BugTrackingSoapClient() {
        }
        
        public BugTrackingSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BugTrackingSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BugTrackingSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BugTrackingSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LoginCheck() {
            base.Channel.LoginCheck();
        }
        
        public System.Threading.Tasks.Task LoginCheckAsync() {
            return base.Channel.LoginCheckAsync();
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue GetNewIssue() {
            return base.Channel.GetNewIssue();
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> GetNewIssueAsync() {
            return base.Channel.GetNewIssueAsync();
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue GetIssueByNum(int IssueNumber) {
            return base.Channel.GetIssueByNum(IssueNumber);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> GetIssueByNumAsync(int IssueNumber) {
            return base.Channel.GetIssueByNumAsync(IssueNumber);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue SaveIssue(BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue Issue) {
            return base.Channel.SaveIssue(Issue);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue> SaveIssueAsync(BS.Output.Elementool.Elementool.BugTracking.BugTrackingIssue Issue) {
            return base.Channel.SaveIssueAsync(Issue);
        }
        
        public System.Data.DataSet ExecuteQuickReport(int ReportID) {
            return base.Channel.ExecuteQuickReport(ReportID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExecuteQuickReportAsync(int ReportID) {
            return base.Channel.ExecuteQuickReportAsync(ReportID);
        }
        
        public System.Data.DataSet GetIssueHistory(int IssueNumber) {
            return base.Channel.GetIssueHistory(IssueNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIssueHistoryAsync(int IssueNumber) {
            return base.Channel.GetIssueHistoryAsync(IssueNumber);
        }
        
        public System.Data.DataSet GetIssueRemarks(int IssueNumber) {
            return base.Channel.GetIssueRemarks(IssueNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetIssueRemarksAsync(int IssueNumber) {
            return base.Channel.GetIssueRemarksAsync(IssueNumber);
        }
        
        public string[] GetIssueAttachments(int IssueNumber) {
            return base.Channel.GetIssueAttachments(IssueNumber);
        }
        
        public System.Threading.Tasks.Task<string[]> GetIssueAttachmentsAsync(int IssueNumber) {
            return base.Channel.GetIssueAttachmentsAsync(IssueNumber);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.IssueAttachment[] GetIssueAttachmentsInfo(int IssueNumber) {
            return base.Channel.GetIssueAttachmentsInfo(IssueNumber);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.IssueAttachment[]> GetIssueAttachmentsInfoAsync(int IssueNumber) {
            return base.Channel.GetIssueAttachmentsInfoAsync(IssueNumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentResponse BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap.DownloadAttachment(BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest request) {
            return base.Channel.DownloadAttachment(request);
        }
        
        public byte[] DownloadAttachment(string filePath, ref bool fileIsEmpty, ref bool fileExists) {
            BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest inValue = new BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest();
            inValue.filePath = filePath;
            inValue.fileIsEmpty = fileIsEmpty;
            inValue.fileExists = fileExists;
            BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentResponse retVal = ((BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap)(this)).DownloadAttachment(inValue);
            fileIsEmpty = retVal.fileIsEmpty;
            fileExists = retVal.fileExists;
            return retVal.DownloadAttachmentResult;
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentResponse> DownloadAttachmentAsync(BS.Output.Elementool.Elementool.BugTracking.DownloadAttachmentRequest request) {
            return base.Channel.DownloadAttachmentAsync(request);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.DeleteAttachmentResult DeleteAttachment(int IssueNumber, string FileUrl) {
            return base.Channel.DeleteAttachment(IssueNumber, FileUrl);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.DeleteAttachmentResult> DeleteAttachmentAsync(int IssueNumber, string FileUrl) {
            return base.Channel.DeleteAttachmentAsync(IssueNumber, FileUrl);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.AddAttachmentResult AddAttachment(int IssueNumber, string FileName) {
            return base.Channel.AddAttachment(IssueNumber, FileName);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.AddAttachmentResult> AddAttachmentAsync(int IssueNumber, string FileName) {
            return base.Channel.AddAttachmentAsync(IssueNumber, FileName);
        }
        
        public int GetMaxAttachmentSize() {
            return base.Channel.GetMaxAttachmentSize();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxAttachmentSizeAsync() {
            return base.Channel.GetMaxAttachmentSizeAsync();
        }
        
        public System.Data.DataSet GetWelcomeReports() {
            return base.Channel.GetWelcomeReports();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWelcomeReportsAsync() {
            return base.Channel.GetWelcomeReportsAsync();
        }
        
        public string GetDBBackup() {
            return base.Channel.GetDBBackup();
        }
        
        public System.Threading.Tasks.Task<string> GetDBBackupAsync() {
            return base.Channel.GetDBBackupAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportResponse BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap.ExecuteWelcomeReport(BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest request) {
            return base.Channel.ExecuteWelcomeReport(request);
        }
        
        public System.Data.DataSet ExecuteWelcomeReport(string ReportID, ref string Description) {
            BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest inValue = new BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest();
            inValue.ReportID = ReportID;
            inValue.Description = Description;
            BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportResponse retVal = ((BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap)(this)).ExecuteWelcomeReport(inValue);
            Description = retVal.Description;
            return retVal.ExecuteWelcomeReportResult;
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportResponse> ExecuteWelcomeReportAsync(BS.Output.Elementool.Elementool.BugTracking.ExecuteWelcomeReportRequest request) {
            return base.Channel.ExecuteWelcomeReportAsync(request);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.IssueField[] GetCustomReportQueryFields(bool UserDefinedFieldsOnly) {
            return base.Channel.GetCustomReportQueryFields(UserDefinedFieldsOnly);
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.IssueField[]> GetCustomReportQueryFieldsAsync(bool UserDefinedFieldsOnly) {
            return base.Channel.GetCustomReportQueryFieldsAsync(UserDefinedFieldsOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportResponse BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap.ExecuteCustomReport(BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest request) {
            return base.Channel.ExecuteCustomReport(request);
        }
        
        public System.Data.DataSet ExecuteCustomReport(BS.Output.Elementool.Elementool.BugTracking.IssueField[] QueryFields, ref string Description) {
            BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest inValue = new BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest();
            inValue.QueryFields = QueryFields;
            inValue.Description = Description;
            BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportResponse retVal = ((BS.Output.Elementool.Elementool.BugTracking.BugTrackingSoap)(this)).ExecuteCustomReport(inValue);
            Description = retVal.Description;
            return retVal.ExecuteCustomReportResult;
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportResponse> ExecuteCustomReportAsync(BS.Output.Elementool.Elementool.BugTracking.ExecuteCustomReportRequest request) {
            return base.Channel.ExecuteCustomReportAsync(request);
        }
        
        public BS.Output.Elementool.Elementool.BugTracking.QuickReport[] GetQuickReportsList() {
            return base.Channel.GetQuickReportsList();
        }
        
        public System.Threading.Tasks.Task<BS.Output.Elementool.Elementool.BugTracking.QuickReport[]> GetQuickReportsListAsync() {
            return base.Channel.GetQuickReportsListAsync();
        }
        
        public string GetDateFormat() {
            return base.Channel.GetDateFormat();
        }
        
        public System.Threading.Tasks.Task<string> GetDateFormatAsync() {
            return base.Channel.GetDateFormatAsync();
        }
        
        public string[] GetAccountsList() {
            return base.Channel.GetAccountsList();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAccountsListAsync() {
            return base.Channel.GetAccountsListAsync();
        }
    }
}
