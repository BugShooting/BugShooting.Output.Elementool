//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Der Quellcode wurde automatisch mit Microsoft.VSDesigner generiert. Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BS.Output.Elementool.Elementool.BugTracking {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BugTrackingSoap", Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class BugTracking : Microsoft.Web.Services2.WebServicesClientProtocol
  {
        
        private System.Threading.SendOrPostCallback LoginCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewIssueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueByNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveIssueOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteQuickReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueRemarksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueAttachmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIssueAttachmentsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMaxAttachmentSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWelcomeReportsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDBBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteWelcomeReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomReportQueryFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteCustomReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQuickReportsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDateFormatOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountsListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public BugTracking() {
            this.Url = global::BS.Output.Elementool.Properties.Settings.Default.BS_Output_Elementool_Elementool_BugTracking_BugTracking;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginCheckCompletedEventHandler LoginCheckCompleted;
        
        /// <remarks/>
        public event GetNewIssueCompletedEventHandler GetNewIssueCompleted;
        
        /// <remarks/>
        public event GetIssueByNumCompletedEventHandler GetIssueByNumCompleted;
        
        /// <remarks/>
        public event SaveIssueCompletedEventHandler SaveIssueCompleted;
        
        /// <remarks/>
        public event ExecuteQuickReportCompletedEventHandler ExecuteQuickReportCompleted;
        
        /// <remarks/>
        public event GetIssueHistoryCompletedEventHandler GetIssueHistoryCompleted;
        
        /// <remarks/>
        public event GetIssueRemarksCompletedEventHandler GetIssueRemarksCompleted;
        
        /// <remarks/>
        public event GetIssueAttachmentsCompletedEventHandler GetIssueAttachmentsCompleted;
        
        /// <remarks/>
        public event GetIssueAttachmentsInfoCompletedEventHandler GetIssueAttachmentsInfoCompleted;
        
        /// <remarks/>
        public event DownloadAttachmentCompletedEventHandler DownloadAttachmentCompleted;
        
        /// <remarks/>
        public event DeleteAttachmentCompletedEventHandler DeleteAttachmentCompleted;
        
        /// <remarks/>
        public event AddAttachmentCompletedEventHandler AddAttachmentCompleted;
        
        /// <remarks/>
        public event GetMaxAttachmentSizeCompletedEventHandler GetMaxAttachmentSizeCompleted;
        
        /// <remarks/>
        public event GetWelcomeReportsCompletedEventHandler GetWelcomeReportsCompleted;
        
        /// <remarks/>
        public event GetDBBackupCompletedEventHandler GetDBBackupCompleted;
        
        /// <remarks/>
        public event ExecuteWelcomeReportCompletedEventHandler ExecuteWelcomeReportCompleted;
        
        /// <remarks/>
        public event GetCustomReportQueryFieldsCompletedEventHandler GetCustomReportQueryFieldsCompleted;
        
        /// <remarks/>
        public event ExecuteCustomReportCompletedEventHandler ExecuteCustomReportCompleted;
        
        /// <remarks/>
        public event GetQuickReportsListCompletedEventHandler GetQuickReportsListCompleted;
        
        /// <remarks/>
        public event GetDateFormatCompletedEventHandler GetDateFormatCompleted;
        
        /// <remarks/>
        public event GetAccountsListCompletedEventHandler GetAccountsListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/LoginCheck", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LoginCheck() {
            this.Invoke("LoginCheck", new object[0]);
        }
        
        /// <remarks/>
        public void LoginCheckAsync() {
            this.LoginCheckAsync(null);
        }
        
        /// <remarks/>
        public void LoginCheckAsync(object userState) {
            if ((this.LoginCheckOperationCompleted == null)) {
                this.LoginCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginCheckOperationCompleted);
            }
            this.InvokeAsync("LoginCheck", new object[0], this.LoginCheckOperationCompleted, userState);
        }
        
        private void OnLoginCheckOperationCompleted(object arg) {
            if ((this.LoginCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCheckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetNewIssue", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BugTrackingIssue GetNewIssue() {
            object[] results = this.Invoke("GetNewIssue", new object[0]);
            return ((BugTrackingIssue)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewIssueAsync() {
            this.GetNewIssueAsync(null);
        }
        
        /// <remarks/>
        public void GetNewIssueAsync(object userState) {
            if ((this.GetNewIssueOperationCompleted == null)) {
                this.GetNewIssueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewIssueOperationCompleted);
            }
            this.InvokeAsync("GetNewIssue", new object[0], this.GetNewIssueOperationCompleted, userState);
        }
        
        private void OnGetNewIssueOperationCompleted(object arg) {
            if ((this.GetNewIssueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewIssueCompleted(this, new GetNewIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetIssueByNum", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BugTrackingIssue GetIssueByNum(int IssueNumber) {
            object[] results = this.Invoke("GetIssueByNum", new object[] {
                        IssueNumber});
            return ((BugTrackingIssue)(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueByNumAsync(int IssueNumber) {
            this.GetIssueByNumAsync(IssueNumber, null);
        }
        
        /// <remarks/>
        public void GetIssueByNumAsync(int IssueNumber, object userState) {
            if ((this.GetIssueByNumOperationCompleted == null)) {
                this.GetIssueByNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueByNumOperationCompleted);
            }
            this.InvokeAsync("GetIssueByNum", new object[] {
                        IssueNumber}, this.GetIssueByNumOperationCompleted, userState);
        }
        
        private void OnGetIssueByNumOperationCompleted(object arg) {
            if ((this.GetIssueByNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueByNumCompleted(this, new GetIssueByNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/SaveIssue", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BugTrackingIssue SaveIssue(BugTrackingIssue Issue) {
            object[] results = this.Invoke("SaveIssue", new object[] {
                        Issue});
            return ((BugTrackingIssue)(results[0]));
        }
        
        /// <remarks/>
        public void SaveIssueAsync(BugTrackingIssue Issue) {
            this.SaveIssueAsync(Issue, null);
        }
        
        /// <remarks/>
        public void SaveIssueAsync(BugTrackingIssue Issue, object userState) {
            if ((this.SaveIssueOperationCompleted == null)) {
                this.SaveIssueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveIssueOperationCompleted);
            }
            this.InvokeAsync("SaveIssue", new object[] {
                        Issue}, this.SaveIssueOperationCompleted, userState);
        }
        
        private void OnSaveIssueOperationCompleted(object arg) {
            if ((this.SaveIssueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveIssueCompleted(this, new SaveIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/ExecuteQuickReport", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteQuickReport(int ReportID) {
            object[] results = this.Invoke("ExecuteQuickReport", new object[] {
                        ReportID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteQuickReportAsync(int ReportID) {
            this.ExecuteQuickReportAsync(ReportID, null);
        }
        
        /// <remarks/>
        public void ExecuteQuickReportAsync(int ReportID, object userState) {
            if ((this.ExecuteQuickReportOperationCompleted == null)) {
                this.ExecuteQuickReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteQuickReportOperationCompleted);
            }
            this.InvokeAsync("ExecuteQuickReport", new object[] {
                        ReportID}, this.ExecuteQuickReportOperationCompleted, userState);
        }
        
        private void OnExecuteQuickReportOperationCompleted(object arg) {
            if ((this.ExecuteQuickReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteQuickReportCompleted(this, new ExecuteQuickReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetIssueHistory", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetIssueHistory(int IssueNumber) {
            object[] results = this.Invoke("GetIssueHistory", new object[] {
                        IssueNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueHistoryAsync(int IssueNumber) {
            this.GetIssueHistoryAsync(IssueNumber, null);
        }
        
        /// <remarks/>
        public void GetIssueHistoryAsync(int IssueNumber, object userState) {
            if ((this.GetIssueHistoryOperationCompleted == null)) {
                this.GetIssueHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueHistoryOperationCompleted);
            }
            this.InvokeAsync("GetIssueHistory", new object[] {
                        IssueNumber}, this.GetIssueHistoryOperationCompleted, userState);
        }
        
        private void OnGetIssueHistoryOperationCompleted(object arg) {
            if ((this.GetIssueHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueHistoryCompleted(this, new GetIssueHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetIssueRemarks", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetIssueRemarks(int IssueNumber) {
            object[] results = this.Invoke("GetIssueRemarks", new object[] {
                        IssueNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueRemarksAsync(int IssueNumber) {
            this.GetIssueRemarksAsync(IssueNumber, null);
        }
        
        /// <remarks/>
        public void GetIssueRemarksAsync(int IssueNumber, object userState) {
            if ((this.GetIssueRemarksOperationCompleted == null)) {
                this.GetIssueRemarksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueRemarksOperationCompleted);
            }
            this.InvokeAsync("GetIssueRemarks", new object[] {
                        IssueNumber}, this.GetIssueRemarksOperationCompleted, userState);
        }
        
        private void OnGetIssueRemarksOperationCompleted(object arg) {
            if ((this.GetIssueRemarksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueRemarksCompleted(this, new GetIssueRemarksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetIssueAttachments", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetIssueAttachments(int IssueNumber) {
            object[] results = this.Invoke("GetIssueAttachments", new object[] {
                        IssueNumber});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueAttachmentsAsync(int IssueNumber) {
            this.GetIssueAttachmentsAsync(IssueNumber, null);
        }
        
        /// <remarks/>
        public void GetIssueAttachmentsAsync(int IssueNumber, object userState) {
            if ((this.GetIssueAttachmentsOperationCompleted == null)) {
                this.GetIssueAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueAttachmentsOperationCompleted);
            }
            this.InvokeAsync("GetIssueAttachments", new object[] {
                        IssueNumber}, this.GetIssueAttachmentsOperationCompleted, userState);
        }
        
        private void OnGetIssueAttachmentsOperationCompleted(object arg) {
            if ((this.GetIssueAttachmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueAttachmentsCompleted(this, new GetIssueAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetIssueAttachmentsInfo", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IssueAttachment[] GetIssueAttachmentsInfo(int IssueNumber) {
            object[] results = this.Invoke("GetIssueAttachmentsInfo", new object[] {
                        IssueNumber});
            return ((IssueAttachment[])(results[0]));
        }
        
        /// <remarks/>
        public void GetIssueAttachmentsInfoAsync(int IssueNumber) {
            this.GetIssueAttachmentsInfoAsync(IssueNumber, null);
        }
        
        /// <remarks/>
        public void GetIssueAttachmentsInfoAsync(int IssueNumber, object userState) {
            if ((this.GetIssueAttachmentsInfoOperationCompleted == null)) {
                this.GetIssueAttachmentsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIssueAttachmentsInfoOperationCompleted);
            }
            this.InvokeAsync("GetIssueAttachmentsInfo", new object[] {
                        IssueNumber}, this.GetIssueAttachmentsInfoOperationCompleted, userState);
        }
        
        private void OnGetIssueAttachmentsInfoOperationCompleted(object arg) {
            if ((this.GetIssueAttachmentsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIssueAttachmentsInfoCompleted(this, new GetIssueAttachmentsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/DownloadAttachment", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadAttachment(string filePath, ref bool fileIsEmpty, ref bool fileExists) {
            object[] results = this.Invoke("DownloadAttachment", new object[] {
                        filePath,
                        fileIsEmpty,
                        fileExists});
            fileIsEmpty = ((bool)(results[1]));
            fileExists = ((bool)(results[2]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadAttachmentAsync(string filePath, bool fileIsEmpty, bool fileExists) {
            this.DownloadAttachmentAsync(filePath, fileIsEmpty, fileExists, null);
        }
        
        /// <remarks/>
        public void DownloadAttachmentAsync(string filePath, bool fileIsEmpty, bool fileExists, object userState) {
            if ((this.DownloadAttachmentOperationCompleted == null)) {
                this.DownloadAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadAttachmentOperationCompleted);
            }
            this.InvokeAsync("DownloadAttachment", new object[] {
                        filePath,
                        fileIsEmpty,
                        fileExists}, this.DownloadAttachmentOperationCompleted, userState);
        }
        
        private void OnDownloadAttachmentOperationCompleted(object arg) {
            if ((this.DownloadAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadAttachmentCompleted(this, new DownloadAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/DeleteAttachment", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeleteAttachmentResult DeleteAttachment(int IssueNumber, string FileUrl) {
            object[] results = this.Invoke("DeleteAttachment", new object[] {
                        IssueNumber,
                        FileUrl});
            return ((DeleteAttachmentResult)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAttachmentAsync(int IssueNumber, string FileUrl) {
            this.DeleteAttachmentAsync(IssueNumber, FileUrl, null);
        }
        
        /// <remarks/>
        public void DeleteAttachmentAsync(int IssueNumber, string FileUrl, object userState) {
            if ((this.DeleteAttachmentOperationCompleted == null)) {
                this.DeleteAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAttachmentOperationCompleted);
            }
            this.InvokeAsync("DeleteAttachment", new object[] {
                        IssueNumber,
                        FileUrl}, this.DeleteAttachmentOperationCompleted, userState);
        }
        
        private void OnDeleteAttachmentOperationCompleted(object arg) {
            if ((this.DeleteAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAttachmentCompleted(this, new DeleteAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/AddAttachment", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddAttachmentResult AddAttachment(int IssueNumber, string FileName) {
            object[] results = this.Invoke("AddAttachment", new object[] {
                        IssueNumber,
                        FileName});
            return ((AddAttachmentResult)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(int IssueNumber, string FileName) {
            this.AddAttachmentAsync(IssueNumber, FileName, null);
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(int IssueNumber, string FileName, object userState) {
            if ((this.AddAttachmentOperationCompleted == null)) {
                this.AddAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentOperationCompleted);
            }
            this.InvokeAsync("AddAttachment", new object[] {
                        IssueNumber,
                        FileName}, this.AddAttachmentOperationCompleted, userState);
        }
        
        private void OnAddAttachmentOperationCompleted(object arg) {
            if ((this.AddAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentCompleted(this, new AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetMaxAttachmentSize", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMaxAttachmentSize() {
            object[] results = this.Invoke("GetMaxAttachmentSize", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMaxAttachmentSizeAsync() {
            this.GetMaxAttachmentSizeAsync(null);
        }
        
        /// <remarks/>
        public void GetMaxAttachmentSizeAsync(object userState) {
            if ((this.GetMaxAttachmentSizeOperationCompleted == null)) {
                this.GetMaxAttachmentSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMaxAttachmentSizeOperationCompleted);
            }
            this.InvokeAsync("GetMaxAttachmentSize", new object[0], this.GetMaxAttachmentSizeOperationCompleted, userState);
        }
        
        private void OnGetMaxAttachmentSizeOperationCompleted(object arg) {
            if ((this.GetMaxAttachmentSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMaxAttachmentSizeCompleted(this, new GetMaxAttachmentSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetWelcomeReports", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetWelcomeReports() {
            object[] results = this.Invoke("GetWelcomeReports", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetWelcomeReportsAsync() {
            this.GetWelcomeReportsAsync(null);
        }
        
        /// <remarks/>
        public void GetWelcomeReportsAsync(object userState) {
            if ((this.GetWelcomeReportsOperationCompleted == null)) {
                this.GetWelcomeReportsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWelcomeReportsOperationCompleted);
            }
            this.InvokeAsync("GetWelcomeReports", new object[0], this.GetWelcomeReportsOperationCompleted, userState);
        }
        
        private void OnGetWelcomeReportsOperationCompleted(object arg) {
            if ((this.GetWelcomeReportsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWelcomeReportsCompleted(this, new GetWelcomeReportsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetDBBackup", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDBBackup() {
            object[] results = this.Invoke("GetDBBackup", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDBBackupAsync() {
            this.GetDBBackupAsync(null);
        }
        
        /// <remarks/>
        public void GetDBBackupAsync(object userState) {
            if ((this.GetDBBackupOperationCompleted == null)) {
                this.GetDBBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBBackupOperationCompleted);
            }
            this.InvokeAsync("GetDBBackup", new object[0], this.GetDBBackupOperationCompleted, userState);
        }
        
        private void OnGetDBBackupOperationCompleted(object arg) {
            if ((this.GetDBBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDBBackupCompleted(this, new GetDBBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/ExecuteWelcomeReport", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteWelcomeReport(string ReportID, ref string Description) {
            object[] results = this.Invoke("ExecuteWelcomeReport", new object[] {
                        ReportID,
                        Description});
            Description = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteWelcomeReportAsync(string ReportID, string Description) {
            this.ExecuteWelcomeReportAsync(ReportID, Description, null);
        }
        
        /// <remarks/>
        public void ExecuteWelcomeReportAsync(string ReportID, string Description, object userState) {
            if ((this.ExecuteWelcomeReportOperationCompleted == null)) {
                this.ExecuteWelcomeReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteWelcomeReportOperationCompleted);
            }
            this.InvokeAsync("ExecuteWelcomeReport", new object[] {
                        ReportID,
                        Description}, this.ExecuteWelcomeReportOperationCompleted, userState);
        }
        
        private void OnExecuteWelcomeReportOperationCompleted(object arg) {
            if ((this.ExecuteWelcomeReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteWelcomeReportCompleted(this, new ExecuteWelcomeReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetCustomReportQueryFields", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IssueField[] GetCustomReportQueryFields(bool UserDefinedFieldsOnly) {
            object[] results = this.Invoke("GetCustomReportQueryFields", new object[] {
                        UserDefinedFieldsOnly});
            return ((IssueField[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomReportQueryFieldsAsync(bool UserDefinedFieldsOnly) {
            this.GetCustomReportQueryFieldsAsync(UserDefinedFieldsOnly, null);
        }
        
        /// <remarks/>
        public void GetCustomReportQueryFieldsAsync(bool UserDefinedFieldsOnly, object userState) {
            if ((this.GetCustomReportQueryFieldsOperationCompleted == null)) {
                this.GetCustomReportQueryFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomReportQueryFieldsOperationCompleted);
            }
            this.InvokeAsync("GetCustomReportQueryFields", new object[] {
                        UserDefinedFieldsOnly}, this.GetCustomReportQueryFieldsOperationCompleted, userState);
        }
        
        private void OnGetCustomReportQueryFieldsOperationCompleted(object arg) {
            if ((this.GetCustomReportQueryFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomReportQueryFieldsCompleted(this, new GetCustomReportQueryFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/ExecuteCustomReport", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExecuteCustomReport(IssueField[] QueryFields, ref string Description) {
            object[] results = this.Invoke("ExecuteCustomReport", new object[] {
                        QueryFields,
                        Description});
            Description = ((string)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCustomReportAsync(IssueField[] QueryFields, string Description) {
            this.ExecuteCustomReportAsync(QueryFields, Description, null);
        }
        
        /// <remarks/>
        public void ExecuteCustomReportAsync(IssueField[] QueryFields, string Description, object userState) {
            if ((this.ExecuteCustomReportOperationCompleted == null)) {
                this.ExecuteCustomReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCustomReportOperationCompleted);
            }
            this.InvokeAsync("ExecuteCustomReport", new object[] {
                        QueryFields,
                        Description}, this.ExecuteCustomReportOperationCompleted, userState);
        }
        
        private void OnExecuteCustomReportOperationCompleted(object arg) {
            if ((this.ExecuteCustomReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCustomReportCompleted(this, new ExecuteCustomReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetQuickReportsList", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuickReport[] GetQuickReportsList() {
            object[] results = this.Invoke("GetQuickReportsList", new object[0]);
            return ((QuickReport[])(results[0]));
        }
        
        /// <remarks/>
        public void GetQuickReportsListAsync() {
            this.GetQuickReportsListAsync(null);
        }
        
        /// <remarks/>
        public void GetQuickReportsListAsync(object userState) {
            if ((this.GetQuickReportsListOperationCompleted == null)) {
                this.GetQuickReportsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuickReportsListOperationCompleted);
            }
            this.InvokeAsync("GetQuickReportsList", new object[0], this.GetQuickReportsListOperationCompleted, userState);
        }
        
        private void OnGetQuickReportsListOperationCompleted(object arg) {
            if ((this.GetQuickReportsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuickReportsListCompleted(this, new GetQuickReportsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetDateFormat", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDateFormat() {
            object[] results = this.Invoke("GetDateFormat", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDateFormatAsync() {
            this.GetDateFormatAsync(null);
        }
        
        /// <remarks/>
        public void GetDateFormatAsync(object userState) {
            if ((this.GetDateFormatOperationCompleted == null)) {
                this.GetDateFormatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDateFormatOperationCompleted);
            }
            this.InvokeAsync("GetDateFormat", new object[0], this.GetDateFormatOperationCompleted, userState);
        }
        
        private void OnGetDateFormatOperationCompleted(object arg) {
            if ((this.GetDateFormatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDateFormatCompleted(this, new GetDateFormatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.elementool.com/WebServices/BugTracking/GetAccountsList", RequestNamespace="http://www.elementool.com/WebServices/BugTracking", ResponseNamespace="http://www.elementool.com/WebServices/BugTracking", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAccountsList() {
            object[] results = this.Invoke("GetAccountsList", new object[0]);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountsListAsync() {
            this.GetAccountsListAsync(null);
        }
        
        /// <remarks/>
        public void GetAccountsListAsync(object userState) {
            if ((this.GetAccountsListOperationCompleted == null)) {
                this.GetAccountsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountsListOperationCompleted);
            }
            this.InvokeAsync("GetAccountsList", new object[0], this.GetAccountsListOperationCompleted, userState);
        }
        
        private void OnGetAccountsListOperationCompleted(object arg) {
            if ((this.GetAccountsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountsListCompleted(this, new GetAccountsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class BugTrackingIssue {
        
        private bool isReadOnlyField;
        
        private int issueNumberField;
        
        private string submittedOnField;
        
        private System.DateTime submittedOnDateTimeField;
        
        private IssueField[] fieldsArrayField;
        
        /// <remarks/>
        public bool IsReadOnly {
            get {
                return this.isReadOnlyField;
            }
            set {
                this.isReadOnlyField = value;
            }
        }
        
        /// <remarks/>
        public int IssueNumber {
            get {
                return this.issueNumberField;
            }
            set {
                this.issueNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SubmittedOn {
            get {
                return this.submittedOnField;
            }
            set {
                this.submittedOnField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SubmittedOnDateTime {
            get {
                return this.submittedOnDateTimeField;
            }
            set {
                this.submittedOnDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public IssueField[] FieldsArray {
            get {
                return this.fieldsArrayField;
            }
            set {
                this.fieldsArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class IssueField {
        
        private string systemNameField;
        
        private string valueField;
        
        private string captionField;
        
        private bool isRequiredField;
        
        private bool isReadOnlyField;
        
        private bool canNotifyField;
        
        private string[] valueListField;
        
        private FieldLayout layoutField;
        
        private bool sendNotificationField;
        
        /// <remarks/>
        public string SystemName {
            get {
                return this.systemNameField;
            }
            set {
                this.systemNameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Caption {
            get {
                return this.captionField;
            }
            set {
                this.captionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsRequired {
            get {
                return this.isRequiredField;
            }
            set {
                this.isRequiredField = value;
            }
        }
        
        /// <remarks/>
        public bool IsReadOnly {
            get {
                return this.isReadOnlyField;
            }
            set {
                this.isReadOnlyField = value;
            }
        }
        
        /// <remarks/>
        public bool CanNotify {
            get {
                return this.canNotifyField;
            }
            set {
                this.canNotifyField = value;
            }
        }
        
        /// <remarks/>
        public string[] ValueList {
            get {
                return this.valueListField;
            }
            set {
                this.valueListField = value;
            }
        }
        
        /// <remarks/>
        public FieldLayout Layout {
            get {
                return this.layoutField;
            }
            set {
                this.layoutField = value;
            }
        }
        
        /// <remarks/>
        public bool SendNotification {
            get {
                return this.sendNotificationField;
            }
            set {
                this.sendNotificationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class FieldLayout {
        
        private string positionField;
        
        private string fieldTypeField;
        
        private int linesNumField;
        
        /// <remarks/>
        public string Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        public int LinesNum {
            get {
                return this.linesNumField;
            }
            set {
                this.linesNumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class QuickReport {
        
        private int idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public partial class IssueAttachment {
        
        private System.Guid idField;
        
        private string nameField;
        
        private string descriptionField;
        
        /// <remarks/>
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public enum DeleteAttachmentResult {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        AccessDenied,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.elementool.com/WebServices/BugTracking")]
    public enum AddAttachmentResult {
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        InvalidIssueNumber,
        
        /// <remarks/>
        SizeTooBig,
        
        /// <remarks/>
        NoFileRecieved,
        
        /// <remarks/>
        MoreThanOneFileRecieved,
        
        /// <remarks/>
        InvalidExtension,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void LoginCheckCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetNewIssueCompletedEventHandler(object sender, GetNewIssueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewIssueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewIssueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BugTrackingIssue Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BugTrackingIssue)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueByNumCompletedEventHandler(object sender, GetIssueByNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueByNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueByNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BugTrackingIssue Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BugTrackingIssue)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void SaveIssueCompletedEventHandler(object sender, SaveIssueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveIssueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveIssueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BugTrackingIssue Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BugTrackingIssue)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ExecuteQuickReportCompletedEventHandler(object sender, ExecuteQuickReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteQuickReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteQuickReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueHistoryCompletedEventHandler(object sender, GetIssueHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueRemarksCompletedEventHandler(object sender, GetIssueRemarksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueRemarksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueRemarksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueAttachmentsCompletedEventHandler(object sender, GetIssueAttachmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetIssueAttachmentsInfoCompletedEventHandler(object sender, GetIssueAttachmentsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIssueAttachmentsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIssueAttachmentsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IssueAttachment[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IssueAttachment[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DownloadAttachmentCompletedEventHandler(object sender, DownloadAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool fileIsEmpty {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool fileExists {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void DeleteAttachmentCompletedEventHandler(object sender, DeleteAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DeleteAttachmentResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DeleteAttachmentResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void AddAttachmentCompletedEventHandler(object sender, AddAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AddAttachmentResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AddAttachmentResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetMaxAttachmentSizeCompletedEventHandler(object sender, GetMaxAttachmentSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMaxAttachmentSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMaxAttachmentSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetWelcomeReportsCompletedEventHandler(object sender, GetWelcomeReportsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWelcomeReportsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWelcomeReportsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDBBackupCompletedEventHandler(object sender, GetDBBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDBBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDBBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ExecuteWelcomeReportCompletedEventHandler(object sender, ExecuteWelcomeReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteWelcomeReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteWelcomeReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetCustomReportQueryFieldsCompletedEventHandler(object sender, GetCustomReportQueryFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomReportQueryFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomReportQueryFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IssueField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IssueField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void ExecuteCustomReportCompletedEventHandler(object sender, ExecuteCustomReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCustomReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCustomReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetQuickReportsListCompletedEventHandler(object sender, GetQuickReportsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuickReportsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQuickReportsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public QuickReport[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((QuickReport[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetDateFormatCompletedEventHandler(object sender, GetDateFormatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDateFormatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDateFormatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void GetAccountsListCompletedEventHandler(object sender, GetAccountsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591